#!/bin/bash

set -euo pipefail

main() {
    case ${1:-} in
        man-pdf) man-pdf ;;
        random-wallpaper) random-wallpaper ;;
        screenshot) screenshot ;;
        jwt-decode) shift; jwt-decode "$@" ;;
        terminal-popup) shift; terminal-popup "$@" ;;
        terminal-popup-msg) shift; terminal-popup-msg "$@" ;;
        wait-until) shift; wait-until "$@" ;;
        *) exit 1 ;;
    esac
}

man-pdf() {
    d require fd sort gzip groff zathura
    CHOICE=$(fd '\.gz$' /usr/share/man | sort | d menu dmenu) && gzip -dc "$CHOICE" | groff -man -T pdf - | zathura -
}

random-wallpaper() {
    d require shuf head ln feh
    WP=$(ls -1 "$XDG_CONFIG_HOME/wallpapers" --ignore=wallpaper | shuf | head -n 1)
    ln -sf "$WP" "$XDG_CONFIG_HOME/wallpapers/wallpaper"
    feh --bg-fill "$XDG_CONFIG_HOME/wallpapers/wallpaper"
}

screenshot() {
    d require maim xclip
    maim -s -d 1 | xclip -selection clipboard -t image/png
}

# usage: d tools jwt-decode [-1|-2|-3]
jwt-decode() {
    d require base64 cut cat tr
    if [ $# -eq 0 ] || [ "$1" = "-1" ] || [ "$1" = "-2" ] || [ "$1" = "-3" ]; then
        FIELD=$(cut -c 2- <<<"${1:--2}")
    else
        echo "Unknown argument: '$1'" 1>&2
        return 1
    fi

    DATA=$(cat - | cut -d. -f"$FIELD" | tr '_-' '/+')
    LEN=$((${#DATA} % 4))

    if [ $LEN -eq 2 ]; then DATA=${DATA}==
    elif [ $LEN -eq 3 ]; then DATA=${DATA}=
    fi

    base64 -d <<<"$DATA"
    echo
}

terminal-popup-backend-kitty() {
    d require kitty

    local WIDTH=${1:?Width required}
    local HEIGHT=${2:?Height required}

    shift 2
    if [ $# -eq 0 ]; then
        echo "Command required" 1>&2
        return 1
    fi

    kitty --hold -o remember_window_size=no -o initial_window_width="$WIDTH" -o initial_window_height="$HEIGHT" "$@"
}

terminal-popup() {
    if [ -z "$TERMINAL" ]; then
        echo "Terminal not set" 1>&2
        return 1
    fi

    local T
    T=$(type -t "terminal-popup-backend-$TERMINAL")

    if [ "$T" == "function" ]; then
        terminal-popup-backend-"$TERMINAL" "$@"
    else
        echo "Backend '$TERMINAL' not supported" 1>&2
        return 1
    fi
}

terminal-popup-msg() {
    local WIDTH=400
    local HEIGHT=400
    local MSG=

    while [ $# -gt 0 ]; do
        case "$1" in
            -w|--width) WIDTH=$2; shift 2 ;;
            -h|--height) HEIGHT=$2; shift 2 ;;
            *) MSG=$1; shift ;;
        esac
    done

    terminal-popup "$WIDTH" "$HEIGHT" echo "$MSG"
}

wait-until() {
    while ! "$@"; do
        sleep 5
    done
    notify-send "Command succeeded" "$*"
}

main "$@"

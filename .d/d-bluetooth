#!/bin/bash

set -euo pipefail

# shellcheck source=base.sh
source "$(d script-base)"
@setup 'd bluetooth '

@reg x-connect 'Connect to a device'
x-connect () {
    device=$(select-any-device) && connect "$device"
}

@reg x-connect-paired 'Connect to a paired device'
x-connect-paired () {
    device=$(select-paired-device) && connect "$device"
}

# TODO: This never worked, consider how to make this happen.
# For context - the scan gets disabled as soon as the DBus connection
# that requested it gets closed - which is immediately for one-shot
# commands like this one. Using `busctl` isn'tÂ any better, so it might be
# necessary to write something custom that runs the commands and stays
# open for some time before exiting. Alternatively just accept that
# this has to be done via GUI (blueman).

# @reg enable-scan 'Enable scanning'
# enable-scan () {
#     d require bluetoothctl
#     bluetoothctl scan on
# }

@reg x-pair 'Pair device'
x-pair () {
    device=$(select-any-device) && pair "$device"
}

@reg x-trust 'Trust device'
x-trust () {
    device=$(select-any-device) && set-trusted "$device" true
}

@reg x-set-controller-power 'Set controller power'
x-set-controller-power () {
    d require bluetoothctl
    option=$(echo -e "on\noff" | d menu dmenu "option") && bluetoothctl power "$option"
}

@reg x-disconnect 'Disconnect from a device'
x-disconnect () {
    device=$(select-connected-device) && disconnect "$device"
}

@reg x-unpair 'Unpair device'
x-unpair () {
    device=$(select-paired-device) && unpair "$device"
}

@reg x-untrust 'Untrust device'
x-untrust () {
    device=$(select-trusted-device) && set-trusted "$device" false
}

@reg select-connected-device 'Select a connected device' 1
select-connected-device () {
    select-device "$(list-connected-devices | format-devices)"
}

@reg select-paired-device 'Select a paired device' 1
select-paired-device () {
    select-device "$(list-paired-devices | format-devices)"
}

@reg select-trusted-device 'Select a trusted device' 1
select-trusted-device () {
    select-device "$(list-trusted-devices | format-devices)"
}

@reg select-any-device 'Select a device' 1
select-any-device () {
    select-device "$(list-devices | format-devices)"
}

@reg select-device 'Select a device' 1
select-device () {
    d require cut
    devices=${1:-}
    if [[ -z "$devices" ]]; then
        d notify '[bluetooth]' 'No devices provided to select'
        return 1
    fi
    device=$(echo "$devices" | d menu dmenu 'select device') && echo "$device" | cut -d' ' -f2
}

@reg list-connected-devices 'List connected devices' 1
list-connected-devices () {
    d require jq
    list-devices | jq -r 'map(select(.Connected))'
}

@reg list-paired-devices 'List paired devices' 1
list-paired-devices () {
    d require jq
    list-devices | jq -r 'map(select(.Paired))'
}

@reg list-trusted-devices 'List trusted devices' 1
list-trusted-devices () {
    d require jq
    list-devices | jq -r 'map(select(.Trusted))'
}

@reg is-available 'Check if bluetooth is available' 1
is-available () {
    d require jq
    local CONTROLLERS
    CONTROLLERS=$(list-controllers | jq length)
    [[ "$CONTROLLERS" -gt 0 ]] || return 1
}

@reg list-devices 'List all devices in JSON format' 1
list-devices() {
    list-objects 'org.bluez.Device1'
}

@reg list-controllers 'List all controllers in JSON format' 1
list-controllers() {
    list-objects 'org.bluez.Adapter1'
}

pair() {
    d require busctl
    local dev=${1:?Device address required.}
    local obj
    obj=$(find-device "$dev")
    busctl -j --system call org.bluez "$obj" org.bluez.Device1 Pair
}

unpair() {
    d require busctl jq
    local dev=${1:?Device address required.}
    local obj
    obj=$(find-device "$dev")
    busctl -j --system call org.bluez "$obj" org.bluez.Device1 CancelPairing
}

connect() {
    d require busctl
    local dev=${1:?Device address required.}
    local obj
    obj=$(find-device "$dev")
    busctl -j --system call org.bluez "$obj" org.bluez.Device1 Connect
}

disconnect() {
    d require busctl
    local dev=${1:?Device address required.}
    local obj
    obj=$(find-device "$dev")
    busctl -j --system call org.bluez "$obj" org.bluez.Device1 Disconnect
}

list-objects() {
    d require busctl jq
    local iface_filter=${1:?Interface filter required.}
    busctl -j --system call org.bluez / org.freedesktop.DBus.ObjectManager GetManagedObjects \
        | jq --arg iface "$iface_filter" '[.data[] | to_entries | .[].value[$iface] | select(.) | map_values(.data)]'
}

find-device() {
    d require busctl jq
    local dev=${1:?Device address required.}
    busctl -j --system call org.bluez / org.freedesktop.DBus.ObjectManager GetManagedObjects \
        | jq -r --arg dev "$dev" '.data[] | . as $root | keys[] | . as $k | $root[.]["org.bluez.Device1"] | select(.) | map_values(.data) | select(.Address == $dev) | $k'
}

set-trusted() {
    d require busctl
    local dev=${1:?Device address required.}
    local val=${2:?Value for Trusted property required.}
    local obj
    obj=$(find-device "$dev")
    busctl --system set-property org.bluez "$obj" org.bluez.Device1 Trusted b "$val"
}

format-devices() {
    jq -r '.[] | "Device " + .Address + " " + .Alias'
}

@main "$@"

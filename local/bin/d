#!/bin/bash

DOTFILES_HOME=${DOTFILES_HOME:?DOTFILES_HOME variable is not set.}
D_BASE=$DOTFILES_HOME/d/base.sh

# shellcheck source=../../d/base.sh
source "$D_BASE"
@setup 'd '

@reg error 'Send an error notification' 1
error() {
    TITLE=${1:?Title required}
    SUBTITLE=${2:?Subtitle required}
    if type -t notify-send >/dev/null; then
        notify-send --urgency critical "$TITLE" "$SUBTITLE"
    fi
}

@reg notify 'Send an info notification' 1
notify() {
    TITLE=${1:?Title required}
    SUBTITLE=${2:?Subtitle required}
    if type -t notify-send >/dev/null; then
        notify-send "$TITLE" "$SUBTITLE"
    fi
}

@reg has-cmd 'Check if command exists' 1
has-cmd() {
    local CMD=${1:?Command required}
    [ -x "$CMD" ] || [ -x "$(which "$CMD" 2>/dev/null)" ]
}

@reg require 'Make sure that commands exist' 1
require() {
    if [[ $# -lt 1 ]]; then
        err "No command given"
    fi

    local RESULT=0
    while [ -n "${1:-}" ]; do
        local CMD=$1
        if ! has-cmd "$CMD"; then
            error "Command missing" "$CMD"
            RESULT=1
        fi
        shift
    done

    return $RESULT
}

@reg require-one 'Make sure that at least one of given commands exists' 1
require-one() {
    if [[ $# -lt 1 ]]; then
        err "No command given"
    fi

    local COMMANDS=$*

    while [ -n "${1:-}" ]; do
        local CMD=$1
        if has-cmd "$CMD"; then
            echo "$CMD"
            return 0
        fi
        shift
    done

    error "One of commands required" "$COMMANDS"
    return 1
}

@reg home 'Print the dotfile home directory' 1
home() {
    echo "$DOTFILES_HOME"
}

@reg script-base 'Print the directory with d scripts' 1
script-base() {
    echo "$D_BASE"
}

@reg get-all-requires 'Find and print all the tools that are required in dotfiles scripts' 1
get-all-requires() {
    require rg sed sort uniq
    readarray -t FILES <<<"$(d dotfiles list)"
    rg '^.*\bd require ([a-zA-Z0-9_\- ]+)\b.*$' --replace '$1' --no-filename "${FILES[@]}" | sed 's/ /\n/g' | sort | uniq
}

@reg require-all 'Run `d require` on all the tools that are required in dotfiles scripts' 1
require-all() {
    require xargs
    get-all-requires | xargs -n1 d require
}

@reg git 'Run git in context of the dotfiles repo' 1
git() {
    require git
    cd "$DOTFILES_HOME"
    exec git "$@"
}

@reg make 'Run make in context of the dotfiles repo' 1
make() {
    require make
    cd "$DOTFILES_HOME"
    exec make "$@"
}

@reg edit 'Run editor in context of the dotfiles repo' 1
edit() {
    require "$EDITOR"
    cd "$DOTFILES_HOME"
    exec "$EDITOR"
}

@main "$@"

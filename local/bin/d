#!/bin/bash

DOTFILES_HOME=${DOTFILES_HOME:?DOTFILES_HOME variable is not set.}
D_BASE=$DOTFILES_HOME/.d/base.sh

# shellcheck source=../../.d/base.sh
source "$D_BASE"

d-error() {
    TITLE=${1:?Title required}
    SUBTITLE=${2:?Subtitle required}
    if type -t notify-send >/dev/null; then
        notify-send --urgency critical "$TITLE" "$SUBTITLE"
    fi
}

d-has-cmd() {
    local CMD=${1:?Command required}
    [ -x "$CMD" ] || [ -x "$(which "$CMD" 2>/dev/null)" ]
}

# make sure that a command exists and notify about missing ones
d-require() {
    if [[ $# -lt 1 ]]; then
        err "No command given"
    fi

    local RESULT=0
    while [ -n "${1:-}" ]; do
        local CMD=$1
        if ! d has-cmd "$CMD"; then
            d error "Command missing" "$CMD"
            RESULT=1
        fi
        shift
    done

    return $RESULT
}

d-require-one() {
    if [[ $# -lt 1 ]]; then
        err "No command given"
    fi

    local COMMANDS=$*

    while [ -n "${1:-}" ]; do
        local CMD=$1
        if d has-cmd "$CMD"; then
            echo "$CMD"
            return 0
        fi
        shift
    done

    d error "One of commands required" "$COMMANDS"
    return 1
}

# print the dotfiles directory
d-home() {
    echo "$DOTFILES_HOME"
}

# print the directory with d scripts
d-script-base() {
    echo "$D_BASE"
}

# find and print all the tools that are required in dotfiles scripts
d-get-all-requires() {
    d require rg sed sort uniq
    readarray -t FILES <<<"$(d dotfiles list)"
    rg '^.*\bd require ([a-zA-Z0-9_\- ]+)\b.*$' --replace '$1' --no-filename "${FILES[@]}" | sed 's/ /\n/g' | sort | uniq
}

# run `d require` on all the tools that are required in dotfiles scripts
d-require-all() {
    d require xargs
    d-get-all-requires | xargs -n1 d require
}

d-exec() {
    cd "$DOTFILES_HOME"
    exec "$@"
}

d-git() {
    d require git
    d exec git "$@"
}

d-make() {
    d require make
    d exec make "$@"
}

d-edit() {
    d require "$EDITOR"
    d exec "$EDITOR"
}

forward-cmd "d-" "$@"

#!/bin/bash

set -euo pipefail

main() {
    case ${1:-} in
        show-clipboard-as-qr) show-clipboard-as-qr ;;
        man-pdf) shift; man-pdf "$@" ;;
        random-wallpaper) random-wallpaper ;;
        screenshot) screenshot ;;
        pick-qr) pick-qr ;;
        qr-website) qr-website ;;
        pick-cam) pick-cam ;;
        pick-cam-qr) pick-cam-qr ;;
        qr-cam-website) qr-cam-website ;;
        jwt-decode) shift; jwt-decode "$@" ;;
        terminal-popup) shift; terminal-popup "$@" ;;
        terminal-popup-msg) shift; terminal-popup-msg "$@" ;;
        wait-until) shift; wait-until "$@" ;;
        wayland-protocol-supported) shift; wayland-protocol-supported "$@" ;;
        layer-shell-supported) layer-shell-supported ;;
        md-preview) shift; md-preview "$@" ;;
        clone-repo) shift; clone-repo "$@" ;;
        x-clone-repo) x-clone-repo ;;
        list-x-options) listXOptions ;;
        show) listXOptions | d menu from-json ;;
        *) exit 1 ;;
    esac
}

man-pdf() {
    d require fd sort gzip groff zathura
    man "$@" | groff -man -T pdf - | zathura --mode=fullscreen -
}

random-wallpaper() {
    d require shuf head ln
    local BACKEND
    BACKEND=$(d config get backends.wallpaper feh)
    if [ "$BACKEND" = "feh" ]; then
        d require feh
    elif [ "$BACKEND" = "gnome" ]; then
        d require gsettings
    elif [ "$BACKEND" = "swww" ]; then
        d require swww
    else
        d error "Unknown wallpaper backend" "$BACKEND"
    fi

    WALLPAPERS_DIR=${XDG_CONFIG_HOME:-$HOME/.config}/wallpapers
    WP=$(ls -1 "$WALLPAPERS_DIR" --ignore=wallpaper | shuf | head -n 1)
    ln -sf "$WP" "$WALLPAPERS_DIR/wallpaper"
    if [ "$BACKEND" = "feh" ]; then
        feh --bg-fill "$WALLPAPERS_DIR/wallpaper"
    elif [ "$BACKEND" = "swww" ]; then
        swww img "$WALLPAPERS_DIR/wallpaper"
    else
        local FILE
        FILE=$(realpath "$WALLPAPERS_DIR/wallpaper")
        gsettings set org.gnome.desktop.background picture-uri "file://$FILE"
        gsettings set org.gnome.desktop.background picture-uri-dark "file://$FILE"
    fi
}

screenshot() {
    d require grim slurp satty
    grim -g "$(slurp)" -t ppm - | satty -f - --early-exit --copy-command wl-copy
}

pick-qr() {
    d require grim slurp zbarimg
    grim -g "$(slurp)" -t ppm - | zbarimg -q --raw -
}

qr-website() {
    d require xargs xdg-open
    d tools pick-qr | xargs xdg-open
}

pick-cam() {
    {
        echo "[Default]"
        find /dev/v4l/by-id/ -mindepth 1 -exec basename {} \;
    } | d menu dmenu
}

pick-cam-qr() {
    d require zbarcam
    local CAM
    CAM=$(d tools pick-cam)
    if [ "$CAM" = "[Default]" ]; then
        zbarcam
    else
        zbarcam /dev/v4l/by-id/"$CAM"
    fi
}

qr-cam-website() {
    d require xargs xdg-open
    d tools pick-cam-qr | xargs xdg-open
}

show-clipboard-as-qr() {
    d require mktemp touch wl-paste qrencode imv
    local file
    file=$(mktemp)
    touch "$file"
    trap "rm '$file'" EXIT
    wl-paste | qrencode -o- -s5 >"$file"
    imv "$file"
}

# usage: d tools jwt-decode [-1|-2|-3]
jwt-decode() {
    d require base64 cut cat tr
    if [ $# -eq 0 ]; then
        DATA=$(cat -)
        echo -n "$DATA" | jwt-decode -1 | jq
        echo -n "$DATA" | jwt-decode -2 | jq
        return 0
    elif [ "$1" = "-1" ] || [ "$1" = "-2" ] || [ "$1" = "-3" ]; then
        FIELD=$(cut -c 2- <<<"$1")
    else
        echo "Unknown argument: '$1'" 1>&2
        return 1
    fi

    DATA=$(cat - | cut -d. -f"$FIELD" | tr '_-' '/+')
    LEN=$((${#DATA} % 4))

    if [ $LEN -eq 2 ]; then DATA=${DATA}==
    elif [ $LEN -eq 3 ]; then DATA=${DATA}=
    fi

    base64 -d <<<"$DATA"
    echo
}

terminal-popup-backend-kitty() {
    d require kitty

    local WIDTH=${1:?Width required}
    local HEIGHT=${2:?Height required}

    shift 2
    if [ $# -eq 0 ]; then
        echo "Command required" 1>&2
        return 1
    fi

    kitty --hold -o remember_window_size=no -o initial_window_width="$WIDTH" -o initial_window_height="$HEIGHT" "$@"
}

terminal-popup() {
    if [ -z "$TERMINAL" ]; then
        echo "Terminal not set" 1>&2
        return 1
    fi

    local T
    T=$(type -t "terminal-popup-backend-$TERMINAL")

    if [ "$T" == "function" ]; then
        terminal-popup-backend-"$TERMINAL" "$@"
    else
        echo "Backend '$TERMINAL' not supported" 1>&2
        return 1
    fi
}

terminal-popup-msg() {
    local WIDTH=400
    local HEIGHT=400
    local MSG=

    while [ $# -gt 0 ]; do
        case "$1" in
            -w|--width) WIDTH=$2; shift 2 ;;
            -h|--height) HEIGHT=$2; shift 2 ;;
            *) MSG=$1; shift ;;
        esac
    done

    terminal-popup "$WIDTH" "$HEIGHT" echo "$MSG"
}

wait-until() {
    while ! "$@"; do
        sleep 5
    done
    notify-send "Command succeeded" "$*"
}

wayland-protocol-supported() {
    d require wayland-info
    local protocol=${1:?Protocol required}
    local result
    result=$(wayland-info -i "$protocol")
    if [ -z "$result" ]; then
        return 1
    fi
}

layer-shell-supported() {
    if [[ "$DESKTOP_SESSION" == "niri" ]]; then
        return 0
    elif [[ "$DESKTOP_SESSION" == "gnome" ]] || [[ "$DESKTOP_SESSION" == "ubuntu" ]]; then
        return 1
    fi
    wayland-protocol-supported wlr_layer_shell_v1
}

md-preview() {
    d require jq curl pulldown-cmark
    local file=${1:?File required}
    if [[ ! -r "$file" ]]; then
        echo "Could not read file: $file" 1>&2
        return 1
    fi
    cat <<EOF | "$BROWSER" "data:text/html;base64,$(base64 -w0 <&0)" 2>/dev/null
<!DOCTYPE html>
<html>
<head>
    <title>Markdown Preview</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.8.1/github-markdown-dark.min.css" integrity="sha512-OtEVQKlou4M/GacGwvUl27uo+XNyHfUlMP/furdKClgpkU++3SepORomgRC1uV7qjJ5fnV8ENVt2qXkR8enD1w==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <meta charset="utf-8">
    <style>
    body {
        background-color: #0d1117;
    }

    .markdown-body {
        box-sizing: border-box;
        min-width: 200px;
        max-width: 980px;
        margin: 0 auto;
        padding: 45px;
    }

    @media (max-width: 767px) {
        .markdown-body {
            padding: 15px;
        }
    }
    </style>
</head>
<body>
    <article class="markdown-body">
    $(pulldown-cmark -TFSL <"$file")
    </article>
</body>
</html>
EOF
}

clone-repo() {
    local remote=${1?Remote required}
    cd "$HOME/git"
    git clone "$remote"
}

x-clone-repo() {
    local result
    result=$(d menu input "Remote URL")
    clone-repo "$result"
}

listXOptions() {
    cat <<EOF
{
    "prompt": "tool",
    "commands": [
        {
            "description": "Show clipboard as QR code",
            "command": "d tools show-clipboard-as-qr"
        },
        {
            "description": "Manual (pdf)",
            "command": "d tools man-pdf"
        },
        {
            "description": "Open QR code URL",
            "command": "d tools qr-website"
        },
        {
            "description": "Change to random wallpaper",
            "command": "d tools random-wallpaper"
        },
        {
            "description": "Screenshot",
            "command": "d tools screenshot"
        },
        {
            "description": "Git clone",
            "command": "d tools x-clone-repo"
        }
    ]
}
EOF
}

main "$@"
